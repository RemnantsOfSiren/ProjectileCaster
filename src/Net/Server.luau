--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.15.3 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[2] = table.create(256)
export type Projectile = { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }
local function WriteEVENT_create(Value: { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }): ()
	-- Allocate BLOCK: 43 bytes
	local BLOCK_START = Allocate(43)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	local Length = #Value.Id
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.Id, Length)
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Value.Size)
	buffer.writef64(SendBuffer, BLOCK_START + 5, Value.Time)
	buffer.writeu16(SendBuffer, BLOCK_START + 13, Value.Speed)
	local Vector = Value.Start
	buffer.writei32(SendBuffer, BLOCK_START + 15, Vector.X)
	buffer.writei32(SendBuffer, BLOCK_START + 19, Vector.Y)
	buffer.writei32(SendBuffer, BLOCK_START + 23, Vector.Z)
	local Vector = Value.Direction
	buffer.writef32(SendBuffer, BLOCK_START + 27, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 31, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 35, Vector.Z)
	buffer.writeu8(SendBuffer, BLOCK_START + 39, Value.Config ~= nil and 1 or 0)
	if Value.Config ~= nil then
		table.insert(SendInstances, Value.Config or false :: any)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 40, Value.Visual ~= nil and 1 or 0)
	if Value.Visual ~= nil then
		table.insert(SendInstances, Value.Visual or false :: any)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 41, Value.Ignore ~= nil and 1 or 0)
	if Value.Ignore ~= nil then
		-- Allocate BLOCK: 1 bytes
		local BLOCK_START = Allocate(1)
		-- START ARRAY
		buffer.writeu8(SendBuffer, BLOCK_START + 0, #Value.Ignore)
		for Index = 1, #Value.Ignore do
			local Item_2 = Value.Ignore[Index]
			table.insert(SendInstances, Item_2 or false :: any)
		end
		-- END ARRAY
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 42, Value.MaxDistance ~= nil and 1 or 0)
	if Value.MaxDistance ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		buffer.writeu16(SendBuffer, BLOCK_START + 0, Value.MaxDistance)
	end
end

local function WriteEVENT_update(Value: { Id: string, Time: number, Position: Vector3, Direction: Vector3 }): ()
	-- Allocate BLOCK: 35 bytes
	local BLOCK_START = Allocate(35)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	local Length = #Value.Id
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.Id, Length)
	buffer.writef64(SendBuffer, BLOCK_START + 3, Value.Time)
	local Vector = Value.Position
	buffer.writei32(SendBuffer, BLOCK_START + 11, Vector.X)
	buffer.writei32(SendBuffer, BLOCK_START + 15, Vector.Y)
	buffer.writei32(SendBuffer, BLOCK_START + 19, Vector.Z)
	local Vector = Value.Direction
	buffer.writef32(SendBuffer, BLOCK_START + 23, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 27, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 31, Vector.Z)
end

local function WriteEVENT_destroy(Value: string): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

local function ReadEVENT_hit(): ({ Id: string, Time: number, Normal: Vector3, Object: (Instance)?, Position: Vector3 })
	-- Read BLOCK: 35 bytes
	local BLOCK_START = Read(35)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Time = buffer.readf64(RecieveBuffer, BLOCK_START + 2)
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 10)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 14)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 18)
	Value.Normal = Vector3.new(X, Y, Z)
	if Value.Normal.Magnitude < 0 then error(`Expected magnitude of "Value.Normal" to be larger than 0, got {Value.Normal.Magnitude} instead.`) end
	if Value.Normal.Magnitude > 2 then error(`Expected magnitude of "Value.Normal" to be smaller than 2, got {Value.Normal.Magnitude} instead.`) end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 22) == 1 then
		RecieveInstanceCursor += 1
		Value.Object = RecieveInstances[RecieveInstanceCursor]
		if (not Value.Object) or typeof(Value.Object) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.Object)} instead.`) end
		if not Value.Object:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.Object.ClassName}" instead.`) end
	end
	X = buffer.readi32(RecieveBuffer, BLOCK_START + 23)
	Y = buffer.readi32(RecieveBuffer, BLOCK_START + 27)
	Z = buffer.readi32(RecieveBuffer, BLOCK_START + 31)
	Value.Position = Vector3.new(X, Y, Z)
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	create = {
		fire = NOOP,
		fireAll = NOOP,
		fireList = NOOP,
		fireExcept = NOOP
	},
	update = {
		fire = NOOP,
		fireAll = NOOP,
		fireList = NOOP,
		fireExcept = NOOP
	},
	destroy = {
		fire = NOOP,
		fireAll = NOOP,
		fireList = NOOP,
		fireExcept = NOOP
	},
	hit = {
		on = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = "BLINK_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = "BLINK_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 2 then
			local Value: { Id: string, Time: number, Normal: Vector3, Object: (Instance)?, Position: Vector3 } = ReadEVENT_hit()
			if Events.Reliable[2] ~= nil then
				Events.Reliable[2](Player, Value)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"hit\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Player, Value} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	create = {
		fire = function(Player: Player, Value: { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }): ()
			Load(PlayersMap[Player])
			WriteEVENT_create(Value)
			PlayersMap[Player] = Save()
		end,
		fireAll = function(Value: { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }): ()
			Load()
			WriteEVENT_create(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		fireList = function(List: {Player}, Value: { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }): ()
			Load()
			WriteEVENT_create(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		fireExcept = function(Except: Player, Value: { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }): ()
			Load()
			WriteEVENT_create(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	update = {
		fire = function(Player: Player, Value: { Id: string, Time: number, Position: Vector3, Direction: Vector3 }): ()
			Load()
			WriteEVENT_update(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireClient(Player, Buffer, SendInstances)
		end,
		fireAll = function(Value: { Id: string, Time: number, Position: Vector3, Direction: Vector3 }): ()
			Load()
			WriteEVENT_update(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireAllClients(Buffer, SendInstances)
		end,
		fireList = function(List: {Player}, Value: { Id: string, Time: number, Position: Vector3, Direction: Vector3 }): ()
			Load()
			WriteEVENT_update(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			for _, Player in List do
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end
		end,
		fireExcept = function(Except: Player, Value: { Id: string, Time: number, Position: Vector3, Direction: Vector3 }): ()
			Load()
			WriteEVENT_update(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end
		end,
	},
	destroy = {
		fire = function(Player: Player, Value: string): ()
			Load(PlayersMap[Player])
			WriteEVENT_destroy(Value)
			PlayersMap[Player] = Save()
		end,
		fireAll = function(Value: string): ()
			Load()
			WriteEVENT_destroy(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		fireList = function(List: {Player}, Value: string): ()
			Load()
			WriteEVENT_destroy(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		fireExcept = function(Except: Player, Value: string): ()
			Load()
			WriteEVENT_destroy(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	hit = {
		on = function(Listener: (Player: Player, Value: { Id: string, Time: number, Normal: Vector3, Object: (Instance)?, Position: Vector3 }) -> ()): () -> ()
			Events.Reliable[2] = Listener
			for Index, Arguments in Queue.Reliable[2] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				Events.Reliable[2] = nil
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL