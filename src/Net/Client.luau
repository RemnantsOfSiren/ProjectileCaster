--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.15.3 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Events.Unreliable[0] = {}
Queue.Unreliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
export type Projectile = { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }
local function ReadEVENT_create(): ({ Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? })
	-- Read BLOCK: 42 bytes
	local BLOCK_START = Read(42)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Size = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	Value.Time = buffer.readf64(RecieveBuffer, BLOCK_START + 4)
	Value.Speed = buffer.readu16(RecieveBuffer, BLOCK_START + 12)
	local X = buffer.readi32(RecieveBuffer, BLOCK_START + 14)
	local Y = buffer.readi32(RecieveBuffer, BLOCK_START + 18)
	local Z = buffer.readi32(RecieveBuffer, BLOCK_START + 22)
	Value.Start = Vector3.new(X, Y, Z)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 26)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 30)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 34)
	Value.Direction = Vector3.new(X, Y, Z)
	if Value.Direction.Magnitude < 0 then error(`Expected magnitude of "Value.Direction" to be larger than 0, got {Value.Direction.Magnitude} instead.`) end
	if Value.Direction.Magnitude > 2 then error(`Expected magnitude of "Value.Direction" to be smaller than 2, got {Value.Direction.Magnitude} instead.`) end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 38) == 1 then
		RecieveInstanceCursor += 1
		Value.Config = RecieveInstances[RecieveInstanceCursor]
		if (not Value.Config) or typeof(Value.Config) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.Config)} instead.`) end
		if not Value.Config:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.Config.ClassName}" instead.`) end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 39) == 1 then
		RecieveInstanceCursor += 1
		Value.Visual = RecieveInstances[RecieveInstanceCursor]
		if (not Value.Visual) or typeof(Value.Visual) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.Visual)} instead.`) end
		if not Value.Visual:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.Visual.ClassName}" instead.`) end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 40) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		-- START ARRAY
		Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 255 then error(`Expected "Length" to be smaller than 255, got {Length} instead.`) end
		Value.Ignore = table.create(Length)
		for Index = 1, Length do
			RecieveInstanceCursor += 1
			local Item_2 = RecieveInstances[RecieveInstanceCursor]
			if (not Item_2) or typeof(Item_2) ~= "Instance" then error(`Expected an Instance, got {typeof(Item_2)} instead.`) end
			if not Item_2:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Item_2.ClassName}" instead.`) end
			table.insert(Value.Ignore, Item_2)
		end
		-- END ARRAY
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 41) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.MaxDistance = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	end
	return Value
end

local function ReadEVENT_update(): ({ Id: string, Time: number, Position: Vector3, Direction: Vector3 })
	-- Read BLOCK: 34 bytes
	local BLOCK_START = Read(34)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Time = buffer.readf64(RecieveBuffer, BLOCK_START + 2)
	local X = buffer.readi32(RecieveBuffer, BLOCK_START + 10)
	local Y = buffer.readi32(RecieveBuffer, BLOCK_START + 14)
	local Z = buffer.readi32(RecieveBuffer, BLOCK_START + 18)
	Value.Position = Vector3.new(X, Y, Z)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 22)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 26)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 30)
	Value.Direction = Vector3.new(X, Y, Z)
	if Value.Direction.Magnitude < 0 then error(`Expected magnitude of "Value.Direction" to be larger than 0, got {Value.Direction.Magnitude} instead.`) end
	if Value.Direction.Magnitude > 2 then error(`Expected magnitude of "Value.Direction" to be smaller than 2, got {Value.Direction.Magnitude} instead.`) end
	return Value
end

local function ReadEVENT_destroy(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function WriteEVENT_hit(Value: { Id: string, Time: number, Normal: Vector3, Object: (Instance)?, Position: Vector3 }): ()
	-- Allocate BLOCK: 36 bytes
	local BLOCK_START = Allocate(36)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	local Length = #Value.Id
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.Id, Length)
	buffer.writef64(SendBuffer, BLOCK_START + 3, Value.Time)
	local Vector = Value.Normal
	buffer.writef32(SendBuffer, BLOCK_START + 11, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 15, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 19, Vector.Z)
	buffer.writeu8(SendBuffer, BLOCK_START + 23, Value.Object ~= nil and 1 or 0)
	if Value.Object ~= nil then
		table.insert(SendInstances, Value.Object or false :: any)
	end
	local Vector = Value.Position
	buffer.writei32(SendBuffer, BLOCK_START + 24, Vector.X)
	buffer.writei32(SendBuffer, BLOCK_START + 28, Vector.Y)
	buffer.writei32(SendBuffer, BLOCK_START + 32, Vector.Z)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	create = {
		on = NOOP
	},
	update = {
		on = NOOP
	},
	destroy = {
		on = NOOP
	},
	hit = {
		fire = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? } = ReadEVENT_create()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"create\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: string = ReadEVENT_destroy()
			if Events.Reliable[1] ~= nil then
				Events.Reliable[1](Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"destroy\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { Id: string, Time: number, Position: Vector3, Direction: Vector3 } = ReadEVENT_update()
			if Events.Unreliable[0] ~= nil then
				for _, Listener in Events.Unreliable[0] do
					task.spawn(Listener, Value)
				end
			end
		end
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	create = {
		on = function(Listener: (Value: { Id: string, Size: number, Time: number, Speed: number, Start: Vector3, Direction: Vector3, Config: (Instance)?, Visual: (Instance)?, Ignore: ({ Instance })?, MaxDistance: (number)? }) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				Events.Reliable[0] = nil
			end
		end
	},
	update = {
		on = function(Listener: (Value: { Id: string, Time: number, Position: Vector3, Direction: Vector3 }) -> ()): () -> ()
			table.insert(Events.Unreliable[0], Listener)
			return function (): ()
				table.remove(Events.Unreliable[0], table.find(Events.Unreliable[0], Listener))
			end
		end
	},
	destroy = {
		on = function(Listener: (Value: string) -> ()): () -> ()
			Events.Reliable[1] = Listener
			for Index, Arguments in Queue.Reliable[1] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				Events.Reliable[1] = nil
			end
		end
	},
	hit = {
		fire = function(Value: { Id: string, Time: number, Normal: Vector3, Object: (Instance)?, Position: Vector3 }): ()
			WriteEVENT_hit(Value)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL